[{"/home/oivvio/coderepositories/saga/opcleanup/src/main.ts":"1","/home/oivvio/coderepositories/saga/opcleanup/src/qrscanner.ts":"2","/home/oivvio/coderepositories/saga/opcleanup/src/state.ts":"3","/home/oivvio/coderepositories/saga/opcleanup/src/station.ts":"4"},{"size":3814,"mtime":1630502070427,"results":"5","hashOfConfig":"6"},{"size":2539,"mtime":1630563282514,"results":"7","hashOfConfig":"6"},{"size":3573,"mtime":1630502953377,"results":"8","hashOfConfig":"6"},{"size":5288,"mtime":1630504387340,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"b6ok23",{"filePath":"13","messages":"14","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/oivvio/coderepositories/saga/opcleanup/src/main.ts",["19","20","21"],"import \"./styles/style.scss\";\n\nimport Alpine from \"alpinejs\";\nimport { Howl } from \"howler\";\nimport { interpretStation } from \"./station\";\nimport { initQR, scanQRCode } from \"./qrscanner\";\nimport { stations } from \"./state\";\nimport {\n  initializeState,\n  increaseDummyCounter,\n  getState,\n  decreaseHelpAvailable,\n} from \"./state\";\n\nconst AUDIOFILEBASE = \"data/audio/\";\n\nfunction fakeScan(stationId: string) {\n  const state = getState();\n\n  state.user.timers.forEach((timer) => console.log(\"timer left: \", timer));\n  tryStory(stationId);\n}\n\nfunction showQRScanner() {\n  const state = getState();\n  // state.user.showQRScanner = true;\n  state.user.QRScannerIsDisplayed = true;\n  scanQRCode((stationId: string) => {\n    tryStory(stationId);\n  });\n}\n\n// OP Figure out what's going on here\nexport function tryStory(stationId: string): void {\n  // Get the current state\n  const state = getState();\n\n  // Figure out which stations are visited\n  const visitedStationIds = state.user.stationsVisited;\n\n  // If we have already been here\n  if (visitedStationIds.includes(stationId)) {\n    if (state.user.helpAvailable <= 0) {\n      console.warn(\"User has no more available helptracks\");\n    } else {\n      console.log(\n        \"User already visited this story. Playing helpfile: \",\n        state.user.helpAvailable\n      );\n\n      loadStory(stationId, () => {\n        playAudio(\"help-\" + state.user.helpAvailable + \".mp3\");\n\n        decreaseHelpAvailable();\n      });\n    }\n  } else {\n    // If we have NOT already been here\n\n    loadStory(stationId, (station) => {\n      interpretStation(state, station);\n\n      // if (station.level && station.level !== state.user.onLevel) {\n      //   state.user.onLevel = station.level;\n      //   this.loadBackground(station);\n      // }\n    });\n  }\n}\n\n// export function playAudio(filename: string, _: \"station\" | \"help\"): void {\nexport function playAudio(filename: string): void {\n  const state = getState();\n\n  // Some other audio is playing so we to nothing\n  if (state.audio.story.isPlaying) {\n    console.log(\"Audio is playing. Wait.\");\n  } else {\n    // create a new audioElement\n    const fullAudioPath = AUDIOFILEBASE + filename;\n    state.audio.story.isPlaying = false;\n    const audioElement = new Howl({\n      src: [fullAudioPath],\n      html: true, // Stream (i.e.) start playing before downloaded\n      onplay: () => {\n        console.log(\"playing: \", filename);\n        state.audio.story.isPlaying = true;\n      },\n      onend: () => {\n        state.audio.story.isPlaying = false;\n        state.user.showQRScanner = false;\n        state.user.QRScannerCanBeDisplayed = true;\n      },\n    });\n\n    state.audio.story.data = fullAudioPath;\n    state.audio.volume = audioElement.volume();\n    // console.log(\"state.audio.volume: \", state.audio.volume);\n    console.log(\"press play\");\n    audioElement.play();\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  initQR();\n  increaseDummyCounter(1);\n\n  setInterval(() => {\n    increaseDummyCounter(1);\n  }, 1000 * 60 * 60);\n});\n\nfunction loadStory(stationId, callback) {\n  const url = \"data/stations/\" + stationId + \".json\";\n  console.log(\"loading Story: \", url);\n  // $.get(\"data/stations/\" + stationId + \".json\", callback);\n  fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      stations[stationId] = data;\n      callback(data);\n    });\n}\n\n// Initialize state and put it in a Alpine store\ninitializeState();\n\n// Put some functions in global scope so we can access them from our templates.\n//\n// TODO remove this bandaid\n(window as any).fakeScan = fakeScan;\n(window as any).showQRScanner = showQRScanner;\n\n// Instructions from the alpine js docs for starting Alpine\n// Except for the \"as any\" part that's added for the benefit of tsc\n(window as any).Alpine = Alpine;\nAlpine.start();\n","/home/oivvio/coderepositories/saga/opcleanup/src/qrscanner.ts",["22","23","24"],"/home/oivvio/coderepositories/saga/opcleanup/src/state.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/station.ts",[],{"ruleId":"25","severity":1,"message":"26","line":131,"column":12,"nodeType":"27","messageId":"28","endLine":131,"endColumn":15,"suggestions":"29"},{"ruleId":"25","severity":1,"message":"26","line":132,"column":12,"nodeType":"27","messageId":"28","endLine":132,"endColumn":15,"suggestions":"30"},{"ruleId":"25","severity":1,"message":"26","line":136,"column":12,"nodeType":"27","messageId":"28","endLine":136,"endColumn":15,"suggestions":"31"},{"ruleId":"32","severity":2,"message":"33","line":11,"column":7,"nodeType":"34","messageId":"35","endLine":11,"endColumn":12,"fix":"36"},{"ruleId":"37","severity":1,"message":"38","line":36,"column":28,"nodeType":"34","messageId":"39","endLine":36,"endColumn":65},{"ruleId":"40","severity":2,"message":"41","line":36,"column":73,"nodeType":"42","messageId":"43","endLine":36,"endColumn":75},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["44","45"],["46","47"],["48","49"],"prefer-const","'state' is never reassigned. Use 'const' instead.","Identifier","useConst",{"range":"50","text":"51"},"@typescript-eslint/no-unused-vars","'callback' is defined but never used.","unusedVar","@typescript-eslint/no-empty-function","Unexpected empty function 'scanQRCode'.","FunctionDeclaration","unexpected",{"messageId":"52","fix":"53","desc":"54"},{"messageId":"55","fix":"56","desc":"57"},{"messageId":"52","fix":"58","desc":"54"},{"messageId":"55","fix":"59","desc":"57"},{"messageId":"52","fix":"60","desc":"54"},{"messageId":"55","fix":"61","desc":"57"},[398,421],"const state = getState();","suggestUnknown",{"range":"62","text":"63"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"62","text":"64"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"65","text":"63"},{"range":"65","text":"64"},{"range":"66","text":"63"},{"range":"66","text":"64"},[3563,3566],"unknown","never",[3600,3603],[3776,3779]]