[{"/home/oivvio/coderepositories/saga/opcleanup/src/main.ts":"1","/home/oivvio/coderepositories/saga/opcleanup/src/qrscanner.ts":"2","/home/oivvio/coderepositories/saga/opcleanup/src/state.ts":"3","/home/oivvio/coderepositories/saga/opcleanup/src/station.ts":"4","/home/oivvio/coderepositories/saga/opcleanup/src/components/DevBox/DevBox.ts":"5","/home/oivvio/coderepositories/saga/opcleanup/src/components/RootComponent/RootComponent.ts":"6","/home/oivvio/coderepositories/saga/opcleanup/src/components/SagaQrReader/SagaQrReader.ts":"7","/home/oivvio/coderepositories/saga/opcleanup/src/engine.ts":"8","/home/oivvio/coderepositories/saga/opcleanup/src/main_old.ts":"9","/home/oivvio/coderepositories/saga/opcleanup/src/registerServiceWorker.ts":"10","/home/oivvio/coderepositories/saga/opcleanup/src/router/index.ts":"11","/home/oivvio/coderepositories/saga/opcleanup/src/shims-vue.d.ts":"12","/home/oivvio/coderepositories/saga/opcleanup/src/store/index.ts":"13","/home/oivvio/coderepositories/saga/opcleanup/src/types/vue-qrcode-reader.d.ts":"14","/home/oivvio/coderepositories/saga/opcleanup/tests/unit/example.spec.ts":"15","/home/oivvio/coderepositories/saga/opcleanup/src/utils.ts":"16"},{"size":386,"mtime":1631007221361,"results":"17","hashOfConfig":"18"},{"size":2611,"mtime":1630957105326,"results":"19","hashOfConfig":"18"},{"size":3939,"mtime":1630955832855,"results":"20","hashOfConfig":"18"},{"size":8076,"mtime":1631017609490,"results":"21","hashOfConfig":"18"},{"size":501,"mtime":1630953020381,"results":"22","hashOfConfig":"18"},{"size":2208,"mtime":1631013612344,"results":"23","hashOfConfig":"18"},{"size":2450,"mtime":1630925710210,"results":"24","hashOfConfig":"18"},{"size":2779,"mtime":1631006456961,"results":"25","hashOfConfig":"18"},{"size":3929,"mtime":1630952921636,"results":"26","hashOfConfig":"18"},{"size":924,"mtime":1630581606407,"results":"27","hashOfConfig":"18"},{"size":628,"mtime":1630581606407,"results":"28","hashOfConfig":"18"},{"size":168,"mtime":1630581581223,"results":"29","hashOfConfig":"18"},{"size":1993,"mtime":1631018882695,"results":"30","hashOfConfig":"18"},{"size":280,"mtime":1630578533363,"results":"31","hashOfConfig":"18"},{"size":343,"mtime":1630581606407,"results":"32","hashOfConfig":"18"},{"size":758,"mtime":1631016352914,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"179zqdw",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/oivvio/coderepositories/saga/opcleanup/src/main.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/qrscanner.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/state.ts",["69"],"// import Alpine from \"alpinejs\";\n\n// const STATE = \"state\";\n\n// interface IUserState {\n//   QRScannerCanBeDisplayed: boolean;\n//   QRScannerIsDisplayed: boolean;\n//   showQRScanner: boolean;\n//   // showQRScanner: true,\n//   stationsVisited: string[];\n//   tags: string[];\n//   timers: string[];\n//   //onLevel: 0,\n//   helpAvailable: number;\n// }\n\n// export interface IState {\n//   dummyCounter: number;\n//   user: IUserState;\n//   audio: {\n//     volume: number;\n//     story: {\n//       isPlaying: boolean;\n//       data: string | null;\n//     };\n//     background: {\n//       isPlaying: boolean;\n//       data: string | null;\n//     };\n//   };\n// }\n\n// const initialState: IState = {\n//   dummyCounter: 1,\n//   user: {\n//     QRScannerCanBeDisplayed: true,\n//     QRScannerIsDisplayed: false,\n//     showQRScanner: true,\n//     stationsVisited: [],\n//     tags: [],\n//     timers: [],\n//     // onLevel: 0,\n//     helpAvailable: 3,\n//   },\n//   audio: {\n//     volume: 0,\n//     story: {\n//       isPlaying: false,\n//       // data: {},\n//       data: null,\n//     },\n//     background: {\n//       isPlaying: false,\n//       // data: {},\n//       data: null,\n//     },\n//   },\n//   // fakeId: \"play-timer-1\",\n// };\n\nconst STATEKEYS = [\"dummyCounter\", \"user\", \"audio\", \"fakeId\"];\n//let STATEKEYS = [\"dummyCounter\", \"user\", \"fakeId\"];\n\nexport const stations = {};\n// Pick up stored Alpine.store state from localStorage or null if none exists.\n// export function getStateFromLocalStorage(): IState | null {\n//   // Get the serialized data\n\n//   const serializedState = localStorage.getItem(STATE);\n\n//   if (serializedState !== null) {\n//     // Put it in an Alpine store\n//     Alpine.store(STATE, JSON.parse(serializedState));\n\n//     // Return that store\n//     return Alpine.store(STATE);\n//   } else {\n//     // Or null if nothing was on disk\n//     return null;\n//   }\n// }\n\n// // Put state into localStorage\n// function saveStateToLocalStorage(state: IState) {\n//   try {\n//     // state is an Alpine.store that can not be serialized,\n//     // so we must extract the parts we care about into a simple\n//     // object\n//     const stateCopy = {};\n//     STATEKEYS.forEach((key) => {\n//       stateCopy[key] = state[key];\n//     });\n//     const serializedState = JSON.stringify(stateCopy);\n//     localStorage.setItem(STATE, serializedState);\n//   } catch (error) {\n//     console.log(state);\n//     // debugger;\n//   }\n// }\n\n// Run once, on app startup, return an Alpine.store\n// export function initializeState(): IState {\n//   // Try to get persisted state\n//   // let state = getStateFromLocalStorage();\n//   // console.log(\"state from localStorage: \", state);\n//   const state = null;\n//   // If that was successful, return it\n//   if (state !== null) {\n//     return state;\n//   } else {\n//     // Otherwise create a brand new Alpine state\n//     Alpine.store(STATE, initialState);\n\n//     // Put the same thing in localStorage\n//     saveStateToLocalStorage(initialState);\n\n//     // And return it.\n//     console.log(Alpine.store(STATE));\n//     return Alpine.store(STATE);\n//   }\n// }\n\n// This is what we usually call to get the current state.\n// That is, when we don't think that we need to read from disk\n// export function getState(): IState {\n//   return Alpine.store(STATE);\n// }\n\n// All state altering functions are defined below. And follow the pattern of our increaseDummyCounter function\n\n// export function increaseDummyCounter(num: number): void {\n//   // Get our current state\n//   const state = Alpine.store(STATE);\n\n//   // Do our changes\n//   state.dummyCounter += num;\n\n//   // Save the new state to disk\n//   saveStateToLocalStorage(state);\n// }\n\n// export function decreaseHelpAvailable(): void {\n//   // Get our current state\n//   const state = Alpine.store(STATE);\n\n//   // Do our changes\n//   state.user.helpAvailable--;\n\n//   // Save the new state to disk\n//   saveStateToLocalStorage(state);\n// }\n","/home/oivvio/coderepositories/saga/opcleanup/src/station.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/components/DevBox/DevBox.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/components/RootComponent/RootComponent.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/components/SagaQrReader/SagaQrReader.ts",["70","71","72"],"import { defineComponent } from \"vue\";\n\nimport QrScanner from \"qr-scanner\";\n\ninterface IScanRegion {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  downScaledWidth: number;\n  downScaledHeight: number;\n}\n// Bundling as a blob with webpack didn't work so we get the worker code separately\n// QrScanner.WORKER_PATH = \"/js/vendor/qr-scanner-worker.min.js\";\n\n// TODO, make this not be sprickan specific.\nQrScanner.WORKER_PATH = \"/sprickan/js/vendor/qr-scanner-worker.min.js\";\n\nexport default defineComponent({\n  name: \"SagaQrReader\",\n\n  data() {\n    return {\n      result: \"\",\n      error: \"\",\n      foo: \"bar\",\n    };\n  },\n\n  setup(props) {\n    console.log(\"props: \", props);\n  },\n\n  mounted() {\n    console.log(\"on mounted\");\n\n    const videoElement = <HTMLVideoElement>document.getElementById(\"qrvideo\");\n\n    // events canplay, playing and canplaythrough works in firefox desktop\n    // on google chrome durationchange and loadedmetadata\n    //eventNames.forEach((eventName) => {\n    const qrScanner = new QrScanner(\n      videoElement,\n      (result) => {\n        console.log(\"decoded qr code:\", result);\n        const canvas = document.getElementById(\"qrcanvas\");\n        if (canvas) {\n          canvas.style.backgroundColor = \"green\";\n        }\n      },\n\n      (error) => {\n        const canvas = document.getElementById(\"qrcanvas\");\n        if (canvas) {\n          canvas.style.backgroundColor = \"red\";\n        }\n      }\n    );\n\n    qrScanner.start();\n    //\n    videoElement.addEventListener(\"canplay\", () => {\n      const videoNominalWidth = videoElement.videoWidth;\n      const actualWidth = videoElement.offsetWidth;\n      const scalingFactor = actualWidth / videoNominalWidth;\n\n      (window as any).qrScanner = qrScanner;\n      const scanRegion = (qrScanner as any)._scanRegion as IScanRegion;\n\n      const canvas = document.getElementById(\"qrcanvas\");\n      // marker.setAttribute(\"id\", \"marker\");\n      if (canvas) {\n        canvas.style.left = `${scanRegion.x * scalingFactor}px`;\n        canvas.style.top = `${scanRegion.y * scalingFactor}px`;\n        canvas.style.width = `${scanRegion.width * scalingFactor}px`;\n        canvas.style.height = `${scanRegion.height * scalingFactor}px`;\n        canvas.style.display = \"block\";\n      }\n    });\n  },\n\n  methods: {\n    onDecode(result: string) {\n      console.log(result);\n      // this.result = result;\n    },\n\n    onInit() {\n      console.log(\"in onInit\");\n    },\n  },\n});\n","/home/oivvio/coderepositories/saga/opcleanup/src/engine.ts",["73"],"import { Howl } from \"howler\";\nimport { store, Mutations } from \"./store\";\nimport { IStation, interpretStation } from \"./station\";\n\nconst AUDIOFILEBASE = \"data/audio/\";\n\nexport function tryStory(stationId: string): void {\n  console.log(`in tryStory: ${stationId}`);\n  // Get the current state\n  //   const state = getState();\n\n  // Figure out which stations are visited\n  const visitedStationIds = store.state.user.stationsVisited;\n\n  // If we have already been here\n  if (visitedStationIds.includes(stationId)) {\n    if (store.state.user.helpAvailable <= 0) {\n      console.warn(\"User has no more available helptracks\");\n    } else {\n      console.log(\n        \"User already visited this story. Playing helpfile: \",\n        store.state.user.helpAvailable\n      );\n\n      loadStory(stationId, () => {\n        playAudio(\"help-\" + store.state.user.helpAvailable + \".mp3\");\n        store.commit(Mutations.decreaseHelpAvailable);\n      });\n    }\n  } else {\n    // If we have NOT already been here\n\n    loadStory(stationId, (station: IStation) => {\n      interpretStation(store.state, station);\n\n      // if (station.level && station.level !== store.state.user.onLevel) {\n      //   store.state.user.onLevel = station.level;\n      //   this.loadBackground(station);\n      // }\n    });\n  }\n}\n\nexport function playAudio(filename: string): void {\n  // Some other audio is playing so we to nothing\n  if (store.state.audio.story.isPlaying) {\n    console.log(\"Audio is playing. Wait.\");\n  } else {\n    // create a new audioElement\n    const fullAudioPath = AUDIOFILEBASE + filename;\n    store.state.audio.story.isPlaying = false;\n    const audioElement = new Howl({\n      src: [fullAudioPath],\n      //html: true, // Stream (i.e.) start playing before downloaded\n      html5: true, // Stream (i.e.) start playing before downloaded\n      onplay: () => {\n        console.log(\"playing: \", filename);\n        store.state.audio.story.isPlaying = true;\n      },\n      onend: () => {\n        store.state.audio.story.isPlaying = false;\n        store.state.user.showQRScanner = false;\n        store.state.user.QRScannerCanBeDisplayed = true;\n      },\n    });\n\n    store.state.audio.story.data = fullAudioPath;\n    store.state.audio.volume = audioElement.volume();\n    // console.log(\"store.state.audio.volume: \", store.state.audio.volume);\n    console.log(\"press play\");\n    audioElement.play();\n  }\n}\n\nfunction loadStory(stationId: string, callback: (data: any) => void) {\n  const url = \"data/stations/\" + stationId + \".json\";\n  console.log(\"loading Story: \", url);\n  // $.get(\"data/stations/\" + stationId + \".json\", callback);\n  fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(data);\n      // stations[stationId] = data;\n      callback(data);\n    });\n}\n","/home/oivvio/coderepositories/saga/opcleanup/src/main_old.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/registerServiceWorker.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/router/index.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/shims-vue.d.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/store/index.ts",["74"],"/home/oivvio/coderepositories/saga/opcleanup/src/types/vue-qrcode-reader.d.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/tests/unit/example.spec.ts",[],"/home/oivvio/coderepositories/saga/opcleanup/src/utils.ts",[],{"ruleId":"75","severity":1,"message":"76","line":61,"column":7,"nodeType":"77","messageId":"78","endLine":61,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":52,"column":8,"nodeType":"77","messageId":"78","endLine":52,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":67,"column":18,"nodeType":"82","messageId":"83","endLine":67,"endColumn":21,"suggestions":"84"},{"ruleId":"80","severity":1,"message":"81","line":68,"column":40,"nodeType":"82","messageId":"83","endLine":68,"endColumn":43,"suggestions":"85"},{"ruleId":"80","severity":1,"message":"81","line":75,"column":56,"nodeType":"82","messageId":"83","endLine":75,"endColumn":59,"suggestions":"86"},{"ruleId":"75","severity":1,"message":"87","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":35},"@typescript-eslint/no-unused-vars","'STATEKEYS' is assigned a value but never used.","Identifier","unusedVar","'error' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["88","89"],["90","91"],["92","93"],"'ComponentCustomProperties' is defined but never used.",{"messageId":"94","fix":"95","desc":"96"},{"messageId":"97","fix":"98","desc":"99"},{"messageId":"94","fix":"100","desc":"96"},{"messageId":"97","fix":"101","desc":"99"},{"messageId":"94","fix":"102","desc":"96"},{"messageId":"97","fix":"103","desc":"99"},"suggestUnknown",{"range":"104","text":"105"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"104","text":"106"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"107","text":"105"},{"range":"107","text":"106"},{"range":"108","text":"105"},{"range":"108","text":"106"},[1719,1722],"unknown","never",[1786,1789],[2438,2441]]